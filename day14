day 14

SubArray              SubSet             SubString             SubSequence
[1,2,3]              [1,2,3]            "abc"                    "abc"

[1,2]correct         [1,2] corr           ab correct            ab correct

[1,3]incorrect      [1,3] corr            ac wrong              ac correct

[2,1]incorrect      [2,1] wrong          ba wrong                ba wrong



SUBARRAY : 
Array elements should be consecutive 

SUBSETS : 


SUBSTRING : 
Its like subarray , the characters should be continous 

SUBSEQUENCE  : 
Characters might be continous and might not be continous .It should be sequence , reverse not Possible 


INITIAL L and R from 0th ind
run the loop from r to n -1 ;

Sliding window :-

Input: s = "abcabcbb"
Input: s = "bbbbb"

Step 1 :- intiliaze l and r pointer at 0th index.
Step 2 :- run the loop r to l-1.
Step 3 :- Check r characters when inset , if we don't have push the character  into the set use adda method , after pushing the character ,
Step 4 :- if r character contains in the set , remove l character and move l pointer .
Step 5 :- Calculate the length , (l -1).
step 6 :- initialize two var : one for counting 1s and another for counting 0 , if array of r = 0 ; increase the counter .


GREEDY ALGORITHM : 

1. N meeting in a row 
2. Job Scheduling
3. 0-1 Fractional Knapscak

N meetings in a row :
input : N = 6 , start[]={1,3,0,5,8}, end[] = {2,4,5,7,9,9}
output : 1 2 4 5

In a room , we have to conduct maximum possible events from all meetings 
Type 1 : return maximum meanings(just counts) 
type 2 : return pairs also [ending time of current meeting is strictly lesser to the starting time of next meeting ]
type 3 : We have to return all the pairs[Ending time of current pairs and starting time of next pairs can be same .
type 4 : Duplicate meetings acceapted .


From given arrays , make pairs or triplets 
2. Do the custom sorting according to the end of time using comparator method .
3. For sure will take first meeting 
4. Ending time of current meeting strictly lesser to the starting time of next meeting , if it is strictly lesser , consider the meeting 
5. Take some random arrays with starting and ending time , start < less ;
6. 


We can either take the item as a whole or break it into smaller units 

EXAMPLE :
INPUT : N = 3, W = 50 , values[] = { 100,60,120}, weight[] = {20,10,30].


setp 1 : from given arrays , a per kg valued array 
step 2 : make tripets
step 3 : Do the custom sorting based on per kg value 
step 4 : Take complete weight from firrst weight and decrease the weight from total capacity and calculate the value 
-----------------------------------------------------------------------------------------------------------------------------------

JOB SCHEDULING : 
qts : 
INPUT : N = 4 , jobs = {(1,4,20),(2,1,10),(3,1,40),(4,1,30)}

output : 2 60 
Explanation  : the 3rd job with a deadline 1 is performed during the first unit of time . THe second unit of time as its deadline is 4 
profit = 40 + 20 = 60

























































