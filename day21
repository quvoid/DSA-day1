DAY 21 

STACKs : 
Its follows last in first out 
its comes under Linear data structures 

Operations : push , pop , peek isEmpty , display , size .

These are the most 

Stack are used to get the output in constant time which is Big (O)1

import java.util.*;

class Main {
    static int push(int[] arr, int top, int ele) {
        if (top < arr.length - 1) {
            top = top + 1;
            arr[top] = ele;
        } else {
            System.out.println("Stack is full..!");
        }
        return top;
    }

    static int pop(int[] arr, int top) {
        if (top > -1) {
            System.out.println("Popped: " + arr[top]);
            top = top - 1;
        } else {
            System.out.println("Stack is empty..!");
        }
        return top;
    }

    static void peek(int[] arr, int top) {
        if (top == -1) {
            System.out.println("Stack is empty..!");
        } else {
            System.out.println("Top element: " + arr[top]);
        }
    }

    static boolean isEmpty(int top) {
        return top == -1;
    }

    static int size(int top) {
        return top + 1;
    }

    static void display(int[] arr, int top) {
        if (top == -1) {
            System.out.println("Stack is empty..!");
        } else {
            System.out.print("Stack elements: ");
            for (int i = 0; i <= top; i++) {
                System.out.print(arr[i] + " ");
            }
            System.out.println();
        }
    }

    public static void main(String[] args) {
        int[] arr = new int[5];
        int top = -1;

        top = push(arr, top, 1);
        top = push(arr, top, 2);
        top = push(arr, top, 3);
        top = pop(arr, top);
        peek(arr, top);
        System.out.println("Size: " + size(top));
        System.out.println("Is Empty? " + isEmpty(top));
        display(arr, top);
    }
}

Final draft of the code for stacks ...

SORTING : 
sorting algorithms are used to make the sorted data either ascending or descending .
sorting algo is used to convert unsorted data to sorted which helps to get faster output . 

examples : BUBBLE SORT  , SELECTION SORT , INSERTION SORT , MERGE SORT , QUICK SORT ,COUNT SORT , HEAP SORT , RADIX SORT .

BUBBLE SORT : 
Selecting the adjacent elements , comparing those elements and swapping .
after completion of every iteration the weightest will go to nth play 

// Online Java Compiler
// Use this editor to write, compile and run your Java code online
import java.util.Arrays;

class Main {
    public static void main(String[] args) {
        int[] arr = {5, 3, 1, 4, 2};
        bubbleSort(arr); // Sort the array
        System.out.println("Sorted Array: " + Arrays.toString(arr));
    }

    // Bubble Sort Function
    public static void bubbleSort(int[] arr) {
        for (int i = 0; i < arr.length - 1; i++) {
            for (int j = 0; j < arr.length - i - 1; j++) {
                if (arr[j] > arr[j + 1]) {
                    swap(arr, j, j + 1); // Call swap function
                }
            }
        }
    }

    // Swap Function
    public static void swap(int[] arr, int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
}

SELECTION SORT : 




                        best case   ||   average case    ||    worst case
-----------------------------------------------------------------------------

1.Bubble sort

2.Selecection sort

3.Insertion sort 




QUEUES : 
Queues are special data structures which follows first in first out and which comes under linear data structures .

TYPES OF QUEUES : 
Single ended queue.
double ended queue.
Priority queue.
Circular queue.

types of priority queue : 
Minqueue 
Maxqueue 





















